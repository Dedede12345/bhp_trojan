environ({'__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\User\\AppData\\Local\\JetBrains\\PyCharmCE2021.2\\terminal\\history\\BHP-history', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'DEBUG_VALUE': 'True', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'PROGRAMDATA': 'C:\\ProgramData', 'COMPUTERNAME': 'USER-PC', 'ESET_OPTIONS': '                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ', 'SYSTEMDRIVE': 'C:', 'USERDOMAIN': 'USER-PC', 'ONEDRIVE': 'C:\\Users\\User\\OneDrive', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'TMP': 'C:\\Users\\User\\AppData\\Local\\Temp', 'TEMP': 'C:\\Users\\User\\AppData\\Local\\Temp', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'OPENSSL_CONF': 'C:\\Program Files (x86)\\PostgreSQL\\psqlODBC\\etc\\openssl.cnf', 'PROGRAMFILES': 'C:\\Program Files', 'USERDOMAIN_ROAMINGPROFILE': 'USER-PC', 'WINDIR': 'C:\\WINDOWS', 'PROCESSOR_LEVEL': '6', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '8', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'OS': 'Windows_NT', 'EMAIL_HOST_USER': 'gdenisov606@gmail.com', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'AWS_ACCES_KEY_ID': 'AKIAVAXMNDWA3MUELPOO', 'PSMODULEPATH': 'D:\\Мои документы\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'APPDATA': 'C:\\Users\\User\\AppData\\Roaming', 'MYSQLPASS': 'Gegege222$', 'LOCALAPPDATA': 'C:\\Users\\User\\AppData\\Local', 'SECRET_KEY': 'badcacbb9a2adbd2cfcc1232ebe73568a67b2f152ba34062', 'AWS_SECRET_ACCES_KEY': 'oN06LEYG4tJM/x+03e9naV0yRw5uhFVZjSHSIcTX', 'AWS_STORAGE_BUCKET_NAME': 'django-blog-files-616', 'SYSTEMROOT': 'C:\\WINDOWS', 'HOMEPATH': '\\Users\\User', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'LOGONSERVER': '\\\\USER-PC', 'SESSIONNAME': 'Console', 'HOMEDRIVE': 'C:', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'DATAGRIP': 'C:\\Program Files\\JetBrains\\DataGrip 2022.2.2\\bin;', 'PATH': 'C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin;C:\\Program Files\\PuTTY\\;C:\\Program Files\\PostgreSQL\\15\\bin;C:\\Program Files\\Java\\jdk-19\\bin;;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\MySQL\\MySQL Shell 8.0\\bin\\;C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python310\\Scripts\\;C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python310\\;C:\\Windows\\System32;C:\\Program Files\\Tesseract-OCR;C:\\Program Files\\JetBrains\\DataGrip 2022.2.2\\bin;C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2022.2.3\\bin;C:\\Users\\User\\AppData\\Local\\Microsoft\\WindowsApps', 'PUBLIC': 'C:\\Users\\Public', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'IDEA_INITIAL_DIRECTORY': 'C:\\Program Files\\JetBrains\\PyCharm Community Edition 2021.2.3\\bin', 'EMAIL_HOST_PASSWORD': 'vqkxzwxbehlvjtpj', 'PROCESSOR_REVISION': '8c01', 'USERPROFILE': 'C:\\Users\\User', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'USERNAME': 'User', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'PROGRAMW6432': 'C:\\Program Files', 'ZES_ENABLE_SYSMAN': '1', 'TERM_SESSION_ID': 'ed8c5778-f708-4114-b0a8-b1caa964d89d', 'AWS_REGION': 'eu-central-1', 'POSTGRE_BLOG_PASSWORD': 'gegege123$', 'INTELLIJ IDEA COMMUNITY EDITION': 'C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2022.2.3\\bin;'})